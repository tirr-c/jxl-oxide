on:
  push:
    branches:
      - main
      - v*.x
  workflow_dispatch: {}
name: Build

jobs:
  build:
    name: Compile
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-
            ${{ runner.os }}-dot-cargo-
      - name: Detect host triple
        id: detect-host
        shell: bash
        run: |
          rustc -vV | sed -ne 's/^host: /host=/p' >> "$GITHUB_OUTPUT"
      - run: cargo build --release
      - uses: actions/upload-artifact@v4
        with:
          name: jxl-oxide-cli-${{ steps.detect-host.outputs.host }}
          path: |
            target/release/jxl-oxide
            target/release/jxl-oxide.exe
  cross:
    name: Cross-compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - armv7-unknown-linux-gnueabihf
          - aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          targets: ${{ matrix.target }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-cross-0.2.5-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-cross-0.2.5-
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-
            ${{ runner.os }}-dot-cargo-
      - run: cargo install cross --version 0.2.5
      - run: cross build --release --target ${{ matrix.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: jxl-oxide-cli-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/jxl-oxide

  wasm:
    name: WebAssembly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          targets: wasm32-unknown-unknown
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-wasm-pack-0.12.1-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-wasm-pack-0.12.1-
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-
            ${{ runner.os }}-dot-cargo-
      - run: cargo install wasm-pack --version 0.12.1
      - run: cargo install wasm-bindgen-cli --version 0.2.92
      - name: Build WebAssembly module
        working-directory: crates/jxl-oxide-wasm
        run: |
          RUSTFLAGS='-C target-feature=+simd128' wasm-pack build --release --target web --reference-types
          node ./update-package-json.mjs
          wasm-pack pack
      - uses: actions/upload-artifact@v4
        with:
          name: jxl-oxide-wasm
          path: crates/jxl-oxide-wasm/pkg/jxl-oxide-wasm-*.tgz
          compression-level: 0
