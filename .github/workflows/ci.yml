on:
  push:
    branches:
      - main
      - v*.x
  pull_request:
    branches:
      - main
      - v*.x
name: Continuous integration

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          targets: ${{ matrix.target }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-cross-0.2.5-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-cross-0.2.5-
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-
            ${{ runner.os }}-dot-cargo-
      - name: Install cross
        run: cargo install cross --version 0.2.5
      - name: Run tests
        run: cross test --release --all-features --target ${{ matrix.target }}
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: images
          path: crates/jxl-oxide/tests/.artifact/

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: dtolnay/rust-toolchain@nightly
        id: toolchain
        with:
          targets: ${{ matrix.target }}
          components: 'llvm-tools-preview'
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-grcov-0.8.19-cross-0.2.5-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-grcov-0.8.19-cross-0.2.5-
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-
            ${{ runner.os }}-dot-cargo-
      - name: Install grcov
        run: cargo install grcov --version 0.8.19
      - name: Install cross
        run: cargo install cross --version 0.2.5
      - name: Build
        run: cross build --target ${{ matrix.target }}
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort'
      - name: Run tests
        run: cross test --no-fail-fast --all-features --target ${{ matrix.target }}
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort'
          RUSTDOCFLAGS: '-Cpanic=abort'
      - name: Run grcov
        run: |
          zip -0 ccov.zip `find . \( -name "jxl_*.gc*" -or -name "conformance-*.gc*" -or -name "decode-*.gc*" -or -name "crop-*.gc*" -or -name "fuzz_findings-*.gc*" \) -print`
          grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore '../**' --ignore "/*" -o coverage.lcov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.lcov
          flags: rust-${{ matrix.target }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: images
          path: crates/jxl-oxide/tests/.artifact/

  clippy:
    name: Rustfmt and Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        id: toolchain
        with:
          components: clippy
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-dot-cargo-${{ steps.toolchain.outputs.cacheKey }}-
            ${{ runner.os }}-dot-cargo-
      - run: cargo fmt --all --check
      - run: cargo clippy --all --all-features -- -D warnings
